import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class MainApp extends JFrame {
    private DrawPanel drawPanel = new DrawPanel();
    private JTextField scaleField;

    public MainApp() {
        setTitle("Растровые Алгоритмы");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600);
        setLocationRelativeTo(null);

        JPanel controlPanel = new JPanel();
        controlPanel.setLayout(new BorderLayout(10, 10));


        JPanel algorithmPanel = new JPanel();
        algorithmPanel.setLayout(new BoxLayout(algorithmPanel, BoxLayout.Y_AXIS));
        algorithmPanel.setBorder(BorderFactory.createTitledBorder("Алгоритм"));

        JRadioButton stepByStepButton = new JRadioButton("Пошаговый");
        JRadioButton ddaButton = new JRadioButton("ЦДА");
        JRadioButton bresenhamLineButton = new JRadioButton("Брезенхем (отрезок)");
        JRadioButton bresenhamCircleButton = new JRadioButton("Брезенхем (окружность)");

        ButtonGroup algorithmGroup = new ButtonGroup();
        algorithmGroup.add(stepByStepButton);
        algorithmGroup.add(ddaButton);
        algorithmGroup.add(bresenhamLineButton);
        algorithmGroup.add(bresenhamCircleButton);

        algorithmPanel.add(stepByStepButton);
        algorithmPanel.add(ddaButton);
        algorithmPanel.add(bresenhamLineButton);
        algorithmPanel.add(bresenhamCircleButton);

        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;

        JTextField x1Field = createFixedSizeTextField("0");
        JTextField y1Field = createFixedSizeTextField("0");
        JTextField x2Field = createFixedSizeTextField("0");
        JTextField y2Field = createFixedSizeTextField("0");
        JTextField radiusField = createFixedSizeTextField("0");

        JLabel x1Label = createFixedSizeLabel("X1:");
        JLabel y1Label = createFixedSizeLabel("Y1:");
        JLabel x2Label = createFixedSizeLabel("X2:");
        JLabel y2Label = createFixedSizeLabel("Y2:");
        JLabel radiusLabel = createFixedSizeLabel("Радиус:");

        JLabel scaleLabel = new JLabel("Масштаб:");
        scaleField = createFixedSizeTextField("30");

        gbc.gridx = 0;
        gbc.gridy = 0;
        inputPanel.add(x1Label, gbc);
        gbc.gridx = 1;
        inputPanel.add(x1Field, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        inputPanel.add(y1Label, gbc);
        gbc.gridx = 1;
        inputPanel.add(y1Field, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        inputPanel.add(x2Label, gbc);
        gbc.gridx = 1;
        inputPanel.add(x2Field, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        inputPanel.add(y2Label, gbc);
        gbc.gridx = 1;
        inputPanel.add(y2Field, gbc);

        gbc.gridx = 0;
        gbc.gridy = 4;
        inputPanel.add(radiusLabel, gbc);
        gbc.gridx = 1;
        inputPanel.add(radiusField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 5;
        inputPanel.add(scaleLabel, gbc);
        gbc.gridx = 1;
        inputPanel.add(scaleField, gbc);

        JButton drawButton = new JButton("Нарисовать");
        JButton applyScaleButton = new JButton("Применить масштаб");

        ActionListener algorithmSelectionListener = e -> {
            boolean isCircle = bresenhamCircleButton.isSelected();

            radiusField.setVisible(isCircle);
            radiusLabel.setVisible(isCircle);
            x2Field.setVisible(!isCircle);
            y2Field.setVisible(!isCircle);
            x2Label.setVisible(!isCircle);
            y2Label.setVisible(!isCircle);

            inputPanel.revalidate();
            inputPanel.repaint();
        };


        stepByStepButton.addActionListener(algorithmSelectionListener);
        ddaButton.addActionListener(algorithmSelectionListener);
        bresenhamLineButton.addActionListener(algorithmSelectionListener);
        bresenhamCircleButton.addActionListener(algorithmSelectionListener);

        bresenhamLineButton.setSelected(true);
        algorithmSelectionListener.actionPerformed(null);

        controlPanel.add(algorithmPanel, BorderLayout.NORTH);
        controlPanel.add(inputPanel, BorderLayout.CENTER);
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));
        buttonPanel.add(drawButton);
        buttonPanel.add(applyScaleButton);
        controlPanel.add(buttonPanel, BorderLayout.SOUTH);

        add(controlPanel, BorderLayout.WEST);
        add(drawPanel, BorderLayout.CENTER);

        drawButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int x1 = parseInput(x1Field.getText());
                int y1 = parseInput(y1Field.getText());
                int x2 = parseInput(x2Field.getText());
                int y2 = parseInput(y2Field.getText());
                int radius = parseInput(radiusField.getText());

                int scale = parseScaleInput(scaleField.getText());
                String selectedAlgorithm = "";
                if (stepByStepButton.isSelected()) {
                    selectedAlgorithm = "Пошаговый";
                } else if (ddaButton.isSelected()) {
                    selectedAlgorithm = "ЦДА";
                } else if (bresenhamLineButton.isSelected()) {
                    selectedAlgorithm = "Брезенхем (отрезок)";
                } else if (bresenhamCircleButton.isSelected()) {
                    selectedAlgorithm = "Брезенхем (окружность)";
                }

                drawPanel.draw(selectedAlgorithm, x1, y1, x2, y2, radius, scale);
            }
        });

        applyScaleButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int scale = parseScaleInput(scaleField.getText());
                drawPanel.setScale(scale);
            }
        });
    }

    private int parseInput(String text) {
        if (text.isEmpty()) {
            return 0;
        }
        try {
            return Integer.parseInt(text);
        } catch (NumberFormatException e) {
            return 0;
        }
    }

    private int parseScaleInput(String text) {
        if (text.isEmpty()) {
            return 30;
        }
        try {
            int scale = Integer.parseInt(text);
            if (scale < 1) {
                return 30;
            }
            return scale;
        } catch (NumberFormatException e) {
            return 30;
        }
    }

    private JTextField createFixedSizeTextField(String initialValue) {
        JTextField textField = new JTextField(initialValue, 10);
        textField.setPreferredSize(new Dimension(100, 30));
        textField.setMinimumSize(new Dimension(100, 30));
        textField.setMaximumSize(new Dimension(100, 30));
        return textField;
    }

    private JLabel createFixedSizeLabel(String text) {
        JLabel label = new JLabel(text);
        label.setPreferredSize(new Dimension(50, 30));
        return label;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainApp().setVisible(true);
            }
        });
    }
}
import javax.swing.*;
import java.awt.*;

class DrawPanel extends JPanel {
    private int scale = 30;
    private String currentAlgorithm;
    private int x1, y1, x2, y2, radius;

    public DrawPanel() {
        setBackground(Color.WHITE);
    }

    public void setScale(int scale) {
        this.scale = scale;
        repaint();
    }

    public void draw(String algorithm, int x1, int y1, int x2, int y2, int radius, int scale) {
        this.currentAlgorithm = algorithm;
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
        this.radius = radius;
        this.scale = scale;
        repaint();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        drawCoordinatePlane(g);

        if (currentAlgorithm == null) {
            return;
        }

        int centerX = getWidth() / 2;
        int centerY = getHeight() / 2;

        switch (currentAlgorithm) {
            case "Пошаговый":
                drawStepByStep(g, x1, y1, x2, y2, centerX, centerY);
                break;
            case "ЦДА":
                drawDDA(g, x1, y1, x2, y2, centerX, centerY);
                break;
            case "Брезенхем (отрезок)":
                drawBresenhamLine(g, x1, y1, x2, y2, centerX, centerY);
                break;
            case "Брезенхем (окружность)":
                drawCircleBresenham(g, x1, y1, radius, centerX, centerY);
                break;
        }
    }

    private void drawCoordinatePlane(Graphics g) {
        g.setColor(Color.LIGHT_GRAY);

        int width = getWidth();
        int height = getHeight();
        int centerX = width / 2;
        int centerY = height / 2;

        for (int x = centerX % scale; x < width; x += scale) {
            g.drawLine(x, 0, x, height);
        }
        for (int y = centerY % scale; y < height; y += scale) {
            g.drawLine(0, y, width, y);
        }

        g.setColor(Color.BLACK);
        g.drawLine(centerX, 0, centerX, height);
        g.drawLine(0, centerY, width, centerY);

        g.setColor(Color.BLACK);
        Font font = new Font("Arial", Font.PLAIN, 10);
        g.setFont(font);

        for (int x = centerX; x < width; x += scale) {
            g.drawLine(x, centerY - 5, x, centerY + 5);
            if ((x - centerX) / scale != 0) {
                g.drawString(String.valueOf((x - centerX) / scale), x - 5, centerY + 15);
            }
        }
        for (int x = centerX - scale; x > 0; x -= scale) {
            g.drawLine(x, centerY - 5, x, centerY + 5);
            g.drawString(String.valueOf((x - centerX) / scale), x - 10, centerY + 15);
        }

        for (int y = centerY; y < height; y += scale) {
            g.drawLine(centerX - 5, y, centerX + 5, y);
            if ((centerY - y) / scale != 0) {
                g.drawString(String.valueOf(-(y - centerY) / scale), centerX + 10, y + 5);
            }
        }
        for (int y = centerY - scale; y > 0; y -= scale) {
            g.drawLine(centerX - 5, y, centerX + 5, y);
            g.drawString(String.valueOf((centerY - y) / scale), centerX + 10, y + 5);
        }

        g.drawString("(0, 0)", centerX + 5, centerY + 15);
    }

    private void drawPixel(Graphics g, int x, int y, int centerX, int centerY) {
        int screenX = centerX + x * scale;
        int screenY = centerY - y * scale - scale;
        g.fillRect(screenX, screenY, scale, scale);
    }

    private void drawStepByStep(Graphics g, int x1, int y1, int x2, int y2, int centerX, int centerY) {
        g.setColor(Color.BLACK);

        int dx = x2 - x1;
        int dy = y2 - y1;
        int steps = Math.max(Math.abs(dx), Math.abs(dy));

        float xIncrement = dx / (float) steps;
        float yIncrement = dy / (float) steps;

        float x = x1;
        float y = y1;

        for (int i = 0; i <= steps; i++) {
            drawPixel(g, Math.round(x), Math.round(y), centerX, centerY);
            x += xIncrement;
            y += yIncrement;
        }
    }

    private void drawDDA(Graphics g, int x0, int y0, int x1, int y1, int centerX, int centerY) {
        g.setColor(Color.BLUE);

        int dx = x1 - x0;
        int dy = y1 - y0;
        int steps = Math.max(Math.abs(dx), Math.abs(dy));

        float xIncrement = dx / (float) steps;
        float yIncrement = dy / (float) steps;

        float x = x0;
        float y = y0;

        drawPixel(g, Math.round(x), Math.round(y), centerX, centerY);

        for (int i = 1; i <= steps; i++) {
            x += xIncrement;
            y += yIncrement;
            drawPixel(g, Math.round(x), Math.round(y), centerX, centerY);
        }
    }



    private void drawBresenhamLine(Graphics g, int x0, int y0, int x1, int y1, int centerX, int centerY) {
        g.setColor(Color.RED);

        int dx = Math.abs(x1 - x0);
        int dy = Math.abs(y1 - y0);
        int sx = x0 < x1 ? 1 : -1;
        int sy = y0 < y1 ? 1 : -1;

        boolean steep = dy > dx;

        if (steep) {
            int temp = dx;
            dx = dy;
            dy = temp;
        }

        int error = dx / 2;
        int x = x0;
        int y = y0;

        for (int i = 0; i <= dx; i++) {
            if (steep) {
                drawPixel(g, y, x, centerX, centerY);
            } else {
                drawPixel(g, x, y, centerX, centerY);
            }

            error -= dy;
            if (error < 0) {
                y += sy;
                error += dx;
            }
            x += sx;
        }
    }



    private void drawCircleBresenham(Graphics g, int x_center, int y_center, int radius, int centerX, int centerY) {
        g.setColor(Color.GREEN);

        int x = 0;
        int y = radius;
        int d = 3 - 2 * radius;

        while (x <= y) {
            drawPixel(g, x_center + x, y_center + y, centerX, centerY);
            drawPixel(g, x_center - x, y_center + y, centerX, centerY);
            drawPixel(g, x_center + x, y_center - y, centerX, centerY);
            drawPixel(g, x_center - x, y_center - y, centerX, centerY);
            drawPixel(g, x_center + y, y_center + x, centerX, centerY);
            drawPixel(g, x_center - y, y_center + x, centerX, centerY);
            drawPixel(g, x_center + y, y_center - x, centerX, centerY);
            drawPixel(g, x_center - y, y_center - x, centerX, centerY);

            if (d < 0) {
                d += 4 * x + 6;
            } else {
                d += 4 * (x - y) + 10;
                y--;
            }
            x++;
        }
    }

}
